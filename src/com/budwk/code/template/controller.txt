package ${basePackage}.controllers.admin;

import cn.dev33.satoken.annotation.SaCheckPermission;
import ${basePackage}.models.${fileName};
import ${basePackage}.services.${humpName}Service;
import com.osdiot.starter.common.openapi.annotation.ApiDefinition;
import ${rootPackage}.starter.common.page.PageUtil;
import ${rootPackage}.starter.common.result.Result;
import ${rootPackage}.starter.common.result.ResultCode;
import ${rootPackage}.starter.log.annotation.SLog;
import ${rootPackage}.starter.security.utils.SecurityUtil;
import lombok.extern.slf4j.Slf4j;
import org.nutz.dao.Cnd;
import org.nutz.ioc.loader.annotation.Inject;
import org.nutz.ioc.loader.annotation.IocBean;
import org.nutz.lang.Strings;
import org.nutz.mvc.annotation.*;

import javax.servlet.http.HttpServletRequest;

${author}
@IocBean
@At("/admin${urlPath}")
@SLog(tag = "${modelTitle}")
@ApiDefinition(tag = "${modelTitle}")
@Slf4j
public class ${humpName}Controller {
    @Inject
    private ${humpName}Service ${varName}Service;

    @At
    @Ok("json")
    @POST
    @SaCheckPermission("${permission}")
    public Result<?> list(@Param("pageNo") int pageNo, @Param("pageSize") int pageSize, @Param("pageOrderName") String pageOrderName, @Param("pageOrderBy") String pageOrderBy) {
        Cnd cnd = Cnd.NEW();
        if (Strings.isNotBlank(pageOrderName) && Strings.isNotBlank(pageOrderBy)) {
            cnd.orderBy(pageOrderName, PageUtil.getOrder(pageOrderBy));
        } else {
            cnd.desc("createdAt");
        }
        return Result.data(${varName}Service.listPage(pageNo, pageSize, cnd));
    }

    @At
    @Ok("json")
    @POST
    @SLog("新增${modelTitle}:${${varName}.name}")
    @SaCheckPermission("${permission}.create")
    public Result<?> create(@Param("..") ${fileName} ${varName}, HttpServletRequest req) {
        ${varName}.setCreatedBy(SecurityUtil.getUserId());
        ${varName}.setUpdatedBy(SecurityUtil.getUserId());
        ${varName}Service.insert(${varName});
        return Result.success();
    }

    @At
    @Ok("json")
    @POST
    @SLog("修改${modelTitle}:${${varName}.name}")
    @SaCheckPermission("${permission}.update")
    public Result<?> update(@Param("..") ${fileName} ${varName}, HttpServletRequest req) {
        ${varName}.setUpdatedBy(SecurityUtil.getUserId());
        ${varName}Service.updateIgnoreNull(${varName});
        return Result.success();
    }

    @At("/get/{id}")
    @Ok("json")
    @GET
    @SaCheckPermission("${permission}")
    public Result<?> getData(String id, HttpServletRequest req) {
        ${fileName} ${varName} = ${varName}Service.fetch(id);
        if (${varName} == null) {
            return Result.error(ResultCode.NULL_DATA_ERROR);
        }
        return Result.data(${varName});
    }

    @At("/delete")
    @Ok("json")
    @POST
    @SLog("删除${modelTitle}:${name}")
    @SaCheckPermission("${permission}.delete")
    public Result<?> delete(@Param("id") String id, @Param("name") String name, HttpServletRequest req) {
        ${varName}Service.delete(id);
        return Result.success();
    }
}